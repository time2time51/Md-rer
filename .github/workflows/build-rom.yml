name: Build & Release SGDK ROM

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Détection des répertoires projet / res
      - name: Locate project/res folders
        id: paths
        shell: bash
        run: |
          set -e
          if [ -d "Md-rer/res" ]; then
            echo "project_dir=Md-rer" >> $GITHUB_OUTPUT
            echo "res_dir=Md-rer/res" >> $GITHUB_OUTPUT
            echo "out_dir=Md-rer/out" >> $GITHUB_OUTPUT
          else
            echo "project_dir=." >> $GITHUB_OUTPUT
            echo "res_dir=res" >> $GITHUB_OUTPUT
            echo "out_dir=out" >> $GITHUB_OUTPUT
          fi
          echo "Project dir = ${{ steps.paths.outputs.project_dir }}"
          echo "Res dir     = ${{ steps.paths.outputs.res_dir }}"
          ls -la "${{ steps.paths.outputs.res_dir }}" || true

      # Vérif/sanitize du resources.res (UTF-8 sans BOM, LF) + aperçu
      - name: Verify & sanitize resources.res
        shell: bash
        run: |
          set -euo pipefail
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          RES_FILE="$RES_DIR/resources.res"

          if [ ! -f "$RES_FILE" ]; then
            echo "ERREUR: $RES_FILE introuvable" >&2
            exit 1
          fi

          echo "=== BEFORE sanitize ==="
          wc -c "$RES_FILE" || true
          file "$RES_FILE" || true
          head -n 50 "$RES_FILE" || true
          echo "---- hexdump (64 bytes) ----"
          head -c 64 "$RES_FILE" | hexdump -C || true

          # Enlève un éventuel BOM + force fins de ligne Unix
          sudo apt-get update >/dev/null 2>&1 || true
          sudo apt-get install -y dos2unix >/dev/null 2>&1
          sed -i '1s/^\xEF\xBB\xBF//' "$RES_FILE"
          dos2unix "$RES_FILE"

          echo "=== AFTER sanitize ==="
          wc -c "$RES_FILE"
          file "$RES_FILE"
          head -n 20 "$RES_FILE"

      # Prépare les PNG (320x224, <=16 couleurs)
      - name: Prepare PNGs for SGDK (indexed 16 colors)
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y imagemagick
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          shopt -s nullglob
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            [ -f "$img" ] || continue
            echo "Quantizing to 16 colors -> $(basename "$img")"
            convert "$img" \
              -resize 320x224\! \
              -alpha off -background black -alpha remove \
              -dither None -colors 16 -type palette \
              PNG8:"$img"
            COLORS=$(identify -format "%k" "$img" || echo "?")
            echo " -> colors=$COLORS (<=16 OK)"
          done

      # Décompresse Intro.vgz -> intro.vgm si présent
      - name: Decompress VGZ -> VGM
        shell: bash
        run: |
          set -e
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          SRC=$(ls "$RES_DIR" | grep -iE '^intro\.vgz$' || true)
          if [ -z "$SRC" ]; then
            echo "Info: intro.vgz introuvable (OK si intro.vgm existe déjà)."
          else
            echo "intro.vgz trouvé -> conversion en intro.vgm"
            gzip -dc "$RES_DIR/$SRC" > "$RES_DIR/intro.vgm"
            ls -lh "$RES_DIR/intro.vgm"
          fi

      # Droits d’écriture pour l’UID 1000 du conteneur SGDK
      - name: Make workspace writable for container
        run: sudo chown -R 1000:1000 "$GITHUB_WORKSPACE"

      # Build SGDK dans Docker
      - name: Build with SGDK (Docker)
        uses: addnab/docker-run-action@v3
        with:
          image: registry.gitlab.com/doragasu/docker-sgdk:v2.11
          options: >
            --entrypoint /bin/sh
            -e MAKEFLAGS=
            -e GNUMAKEFLAGS=
            -v ${{ github.workspace }}:/m68k
            -w /m68k/${{ steps.paths.outputs.project_dir }}
          run: |
            set -e
            echo "PWD=$(pwd)"
            echo "Listing res/ depuis le conteneur:"
            ls -la ./res || true
            echo "Affichage du début de res/resources.res:"
            head -n 20 ./res/resources.res || true

            mkdir -p src/boot out
            cp /sgdk/src/boot/sega.s src/boot/sega.s
            cp /sgdk/src/boot/rom_head.c src/boot/rom_head.c

            make -j1
            echo '=== out/ listing ==='
            ls -lh ./out || true

      # Rendre les fichiers au runner
      - name: Fix back permissions for runner
        run: sudo chown -R $USER:$USER "$GITHUB_WORKSPACE"

      # Prépare le nom de sortie (prend le 1er .bin trouvé)
      - name: Prepare ROM filename
        id: name
        shell: bash
        run: |
          set -e
          OUT_DIR="${{ steps.paths.outputs.out_dir }}"
          ROM=$(find "$OUT_DIR" -maxdepth 1 -type f -name '*.bin' | head -n1 || true)
          if [ -z "$ROM" ]; then
            echo "ERREUR: Aucun .bin trouvé dans $OUT_DIR"
            ls -la "$OUT_DIR" || true
            exit 1
          fi
          echo "ROM detectee: $ROM"
          REPO="${GITHUB_REPOSITORY##*/}"
          VER="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            OUT="${REPO}-${VER}.bin"
          else
            OUT="${REPO}.bin"
          fi
          cp "$ROM" "$OUT"
          echo "outname=$OUT" >> "$GITHUB_OUTPUT"
          ls -la "$OUT"

      # Upload artifact (v4)
      - name: Upload ROM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rom
          path: ${{ steps.name.outputs.outname }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: rom
          path: .
      - name: Create GitHub Release and attach ROM
        uses: softprops/action-gh-release@v2
        with:
          files: ./*.bin
          generate_release_notes: true
