name: Build & Release SGDK ROM

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Localiser project/res
      - name: Locate project/res folders
        id: paths
        shell: bash
        run: |
          if [ -f "Md-rer/Makefile" ]; then
            PROJECT_DIR="Md-rer"
            RES_DIR="Md-rer/res"
          else
            PROJECT_DIR="."
            RES_DIR="res"
          fi
          if [ ! -d "$RES_DIR" ]; then
            echo "ERREUR: $RES_DIR introuvable"; exit 1
          fi
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "res_dir=$RES_DIR" >> $GITHUB_OUTPUT
          echo "Project dir = $PROJECT_DIR"
          echo "Res dir     = $RES_DIR"
          ls -la "$RES_DIR" || true

      # 2) Préparer PNGs (taille/index/palette)
      - name: Prepare PNGs for SGDK (resize/index/fix tile 0)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick pngquant
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          mogrify -resize 320x224\! -background black -gravity center -extent 320x224 "$RES_DIR"/intro*.PNG "$RES_DIR"/Title.PNG
          for f in "$RES_DIR"/intro*.PNG "$RES_DIR"/Title.PNG; do
            pngquant --force --output "$f" --speed 1 32 "$f" || true
            convert "$f" -colors 64 -type Palette "$f"
            convert "$f" -define png:color-type=3 -define png:bit-depth=8 \
              \( -size 8x8 xc:black \) -insert 0 +append "$f"
          done
          echo "PNG prepared:"
          ls -la "$RES_DIR"

      # 3) MP3 -> WAV (si Intro.mp3 présent)
      - name: Convert MP3 -> WAV (ffmpeg) if Intro.mp3 exists
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y ffmpeg
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          if [ -f "$RES_DIR/Intro.mp3" ]; then
            ffmpeg -y -i "$RES_DIR/Intro.mp3" -ar 22050 -ac 1 "$RES_DIR/intro.wav"
            ls -la "$RES_DIR/intro.wav"
          else
            echo "Intro.mp3 absent; on saute la conversion."
          fi

      # 4) Droits d'écriture pour le conteneur
      - name: Make workspace writable for container
        run: sudo chown -R 1000:1000 "$GITHUB_WORKSPACE"

      # 5) Construction dans le conteneur SGDK (FIX: lancer bash -lc "make -j1")
      - name: Build with SGDK (Docker)
        shell: bash
        run: |
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          docker run --rm \
            -e MAKEFLAGS= -e GNUMAKEFLAGS= \
            -v "$GITHUB_WORKSPACE":/m68k \
            -w "/m68k/$PROJECT_DIR" \
            -t registry.gitlab.com/doragasu/docker-sgdk:v2.11 \
            /bin/bash -lc "make -j1"
      
      # 6) Rendre les fichiers au runner puis empaqueter la ROM
      - name: Fix back permissions for runner
        run: sudo chown -R $USER:$USER "$GITHUB_WORKSPACE"

      - name: Prepare ROM filename
        id: name
        shell: bash
        run: |
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          ROM="$PROJECT_DIR/out/rom.bin"
          if [ ! -f "$ROM" ]; then
            echo "ROM not found at $ROM"; ls -la "$PROJECT_DIR/out" || true; exit 1
          fi
          REPO="${GITHUB_REPOSITORY##*/}"
          VER="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            OUT="${REPO}-${VER}.bin"
          else
            OUT="${REPO}.bin"
          fi
          cp "$ROM" "$OUT"
          echo "outname=$OUT" >> "$GITHUB_OUTPUT"

      - name: Upload ROM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rom
          path: ${{ steps.name.outputs.outname }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: rom
          path: .
      - name: Create GitHub Release and attach ROM
        uses: softprops/action-gh-release@v2
        with:
          files: ./*.bin
          generate_release_notes: true
