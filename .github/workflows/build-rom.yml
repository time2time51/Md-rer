name: Build & Release SGDK ROM

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Localiser projet (racine ou Md-rer/) pour l'appel à make
      - name: Locate project dir
        id: paths
        shell: bash
        run: |
          if [ -f "Md-rer/makefile" ] || [ -f "Md-rer/Makefile" ]; then
            PROJECT_DIR="Md-rer"
          elif [ -f "makefile" ] || [ -f "Makefile" ]; then
            PROJECT_DIR="."
          else
            echo "Aucun makefile trouvé (ni à la racine ni dans Md-rer/)." ; exit 1
          fi
          echo "project_dir=$PROJECT_DIR" >> "$GITHUB_OUTPUT"
          echo "Using project dir: $PROJECT_DIR"
          ls -la "$PROJECT_DIR" || true

      # Donner les droits d'écriture au conteneur (UID 1000)
      - name: Make workspace writable for container
        run: sudo chown -R 1000:1000 "$GITHUB_WORKSPACE"

      # Build SGDK (désactive MAKEFLAGS et force make -j1)
      - name: Build with SGDK (Docker)
        shell: bash
        run: |
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          docker run --rm \
            -v "$GITHUB_WORKSPACE":/m68k \
            -w "/m68k/$PROJECT_DIR" \
            --entrypoint /bin/sh \
            -t registry.gitlab.com/doragasu/docker-sgdk:v2.11 \
            -lc 'unset MAKEFLAGS GNUMAKEFLAGS; make -j1'

      # Rendre les fichiers au runner (pour renommer/uploader)
      - name: Fix back permissions for runner
        run: sudo chown -R $USER:$USER "$GITHUB_WORKSPACE"

      - name: Prepare ROM filename
        id: name
        shell: bash
        run: |
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          ROM="$PROJECT_DIR/out/rom.bin"
          if [ ! -f "$ROM" ]; then
            echo "ROM not found at $ROM" ; ls -la "$PROJECT_DIR/out" || true ; exit 1
          fi
          REPO="${GITHUB_REPOSITORY##*/}"
          VER="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            OUT="${REPO}-${VER}.bin"
          else
            OUT="${REPO}.bin"
          fi
          cp "$ROM" "$OUT"
          echo "outname=$OUT" >> "$GITHUB_OUTPUT"

      - name: Upload ROM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rom
          path: ${{ steps.name.outputs.outname }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: rom
          path: .
      - name: Create GitHub Release and attach ROM
        uses: softprops/action-gh-release@v2
        with:
          files: ./*.bin
          generate_release_notes: true
