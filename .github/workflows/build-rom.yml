name: Build & Release SGDK ROM

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Localise le projet (racine ou sous-dossier)
      - name: Locate project/res folders
        id: paths
        shell: bash
        run: |
          if [ -d "Md-rer/res" ]; then
            echo "project_dir=Md-rer" >> $GITHUB_OUTPUT
            echo "res_dir=Md-rer/res" >> $GITHUB_OUTPUT
            echo "out_dir=Md-rer/out" >> $GITHUB_OUTPUT
          else
            echo "project_dir=." >> $GITHUB_OUTPUT
            echo "res_dir=res" >> $GITHUB_OUTPUT
            echo "out_dir=out" >> $GITHUB_OUTPUT
          fi
          echo "Project dir = ${{ steps.paths.outputs.project_dir }}"
          echo "Res dir     = ${{ steps.paths.outputs.res_dir }}"
          ls -la "${{ steps.paths.outputs.res_dir }}" || true

      # Nettoie resources.res (BOM/CRLF/accents)
      - name: Sanitize resources.res
        shell: bash
        run: |
          set -euo pipefail
          RES="${{ steps.paths.outputs.res_dir }}/resources.res"
          if [ -f "$RES" ]; then
            dos2unix "$RES" >/dev/null 2>&1 || true
            # supprime BOM UTF-8 s’il existe
            if [ "$(head -c 3 "$RES" | hexdump -v -e '/1 "%02X"')" = "EFBBBF" ]; then
              tail -c +4 "$RES" > "$RES.tmp" && mv "$RES.tmp" "$RES"
            fi
            # accents -> ASCII (uniquement pour éviter les surprises)
            iconv -f UTF-8 -t ASCII//TRANSLIT -c "$RES" > "$RES.tmp" && mv "$RES.tmp" "$RES"
            echo "resources.res ok:"
            head -n 30 "$RES"
          else
            echo "::warning::${RES} introuvable"
          fi

      # Prépare les PNG : on normalise les 3 fonds d’intro + le fond titre.
      # (On évite ici de toucher à d’éventuels sprites plus tard.)
      - name: Normalize title/intro PNGs (320x224, 16 colors)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y imagemagick
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          for f in intro1.PNG intro2.PNG intro3.PNG title_bg.PNG; do
            if [ -f "$RES_DIR/$f" ]; then
              echo "[Normalize] $f -> 320x224, 16 couleurs (PNG8)"
              convert "$RES_DIR/$f" \
                -resize 320x224\! \
                -alpha off -background black -alpha remove \
                -dither None -colors 16 -type palette \
                PNG8:"$RES_DIR/$f"
            fi
          done

      # Décompresse Intro.vgz -> intro.vgm si présent
      - name: Decompress VGZ -> VGM
        shell: bash
        run: |
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          if [ -f "$RES_DIR/intro.vgz" ]; then
            echo "VGZ -> VGM"
            gzip -dc "$RES_DIR/intro.vgz" > "$RES_DIR/intro.vgm"
            ls -lh "$RES_DIR/intro.vgm"
          fi

      # Donne les droits au conteneur
      - name: Make workspace writable for container
        run: sudo chown -R 1000:1000 "$GITHUB_WORKSPACE"

      # Petite vérif
      - name: Verify resources.res before build
        shell: bash
        run: |
          ls -l "${{ steps.paths.outputs.res_dir }}/resources.res"
          head -n 20 "${{ steps.paths.outputs.res_dir }}/resources.res"

      # Build SGDK dans Docker
      - name: Build with SGDK (Docker)
        uses: addnab/docker-run-action@v3
        with:
          image: registry.gitlab.com/doragasu/docker-sgdk:v2.11
          options: >
            --entrypoint /bin/sh
            -e MAKEFLAGS=
            -e GNUMAKEFLAGS=
            -v ${{ github.workspace }}:/m68k
            -w /m68k/${{ steps.paths.outputs.project_dir }}
          run: |
            set -e
            mkdir -p src/boot out
            cp /sgdk/src/boot/sega.s src/boot/sega.s
            cp /sgdk/src/boot/rom_head.c src/boot/rom_head.c
            echo "*** Test rescomp ***"
            /usr/bin/java -jar /sgdk/bin/rescomp.jar res/resources.res res/resources.rs -dep out/res/resources.o || true
            echo "*** make ***"
            make -j1
            echo '=== out/ listing ==='
            ls -lh ./out || true

      # Rend les permissions au runner
      - name: Fix back permissions for runner
        run: sudo chown -R $USER:$USER "$GITHUB_WORKSPACE"

      # Prépare le nom de la ROM
      - name: Prepare ROM filename
        id: name
        shell: bash
        run: |
          OUT_DIR="${{ steps.paths.outputs.out_dir }}"
          ROM=$(find "$OUT_DIR" -maxdepth 1 -type f -name '*.bin' | head -n1 || true)
          if [ -z "$ROM" ]; then
            echo "ERREUR: Aucun .bin trouvé dans $OUT_DIR"
            ls -la "$OUT_DIR" || true
            exit 1
          fi
          REPO="${GITHUB_REPOSITORY##*/}"
          VER="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            OUT="${REPO}-${VER}.bin"
          else
            OUT="${REPO}.bin"
          fi
          cp "$ROM" "$OUT"
          echo "outname=$OUT" >> "$GITHUB_OUTPUT"
          ls -la "$OUT"

      # Upload artifact
      - name: Upload ROM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rom
          path: ${{ steps.name.outputs.outname }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: rom
          path: .
      - name: Create GitHub Release and attach ROM
        uses: softprops/action-gh-release@v2
        with:
          files: ./*.bin
          generate_release_notes: true
