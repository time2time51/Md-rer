name: Build & Release SGDK ROM

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Détecte où est le projet (racine ou sous-dossier)
      - name: Locate project/res folders
        id: paths
        shell: bash
        run: |
          if [ -d "Md-rer/res" ]; then
            echo "project_dir=Md-rer" >> $GITHUB_OUTPUT
            echo "res_dir=Md-rer/res" >> $GITHUB_OUTPUT
            echo "out_dir=Md-rer/out" >> $GITHUB_OUTPUT
          else
            echo "project_dir=." >> $GITHUB_OUTPUT
            echo "res_dir=res" >> $GITHUB_OUTPUT
            echo "out_dir=out" >> $GITHUB_OUTPUT
          fi
          echo "Project dir = ${{ steps.paths.outputs.project_dir }}"
          echo "Res dir     = ${{ steps.paths.outputs.res_dir }}"
          ls -la "${{ steps.paths.outputs.res_dir }}" || true

      # Sanitize resources.res (CRLF -> LF, suppression BOM, translit ASCII)
      - name: Sanitize resources.res
        shell: bash
        run: |
          set -euo pipefail
          RES="${{ steps.paths.outputs.res_dir }}/resources.res"
          if [ -f "$RES" ]; then
            echo "=== BEFORE sanitize ==="
            wc -c "$RES" || true
            file "$RES" || true
            head -n 20 "$RES" || true
            echo "---- hexdump (64 bytes) ----"
            head -c 64 "$RES" | hexdump -C || true

            sudo apt-get update
            sudo apt-get install -y dos2unix

            dos2unix "$RES" >/dev/null 2>&1 || true
            # retire BOM éventuel
            if [ "$(head -c 3 "$RES" | hexdump -v -e '/1 "%02X"')" = "EFBBBF" ]; then
              tail -c +4 "$RES" > "$RES.tmp" && mv "$RES.tmp" "$RES"
            fi
            # translit commentaires non-ASCII -> ASCII (sans casser la syntaxe)
            iconv -f UTF-8 -t ASCII//TRANSLIT -c "$RES" > "$RES.tmp" && mv "$RES.tmp" "$RES"

            echo "=== AFTER sanitize ==="
            wc -c "$RES" || true
            file "$RES" || true
            head -n 20 "$RES" || true
          else
            echo "::warning::${RES} introuvable"
          fi

      # Prépare les PNG et IMPOSE une palette unique (celle de title_bg.PNG)
            - name: Prepare PNGs for SGDK (16 couleurs, palette unique)
        shell: bash
        run: |
          set -euo pipefail
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          sudo apt-get update
          sudo apt-get install -y imagemagick

          # 1) Normalise toutes les images (320x224, 16 couleurs)
          shopt -s nullglob
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            [ -f "$img" ] || continue
            echo "[Normalize] $(basename "$img") -> 320x224, 16 couleurs (PNG8)"
            convert "$img" \
              -resize 320x224\! \
              -alpha off -background black -alpha remove \
              -dither None -colors 16 -type palette \
              PNG8:"$img"
          done

          # 2) Extrait la palette de title_bg en fichier (IM6-friendly)
          if [ ! -f "$RES_DIR/title_bg.PNG" ]; then
            echo "::error::title_bg.PNG manquant dans $RES_DIR"
            exit 1
          fi
          echo "[Palette] Extraction palette depuis title_bg.PNG -> palette.png"
          convert "$RES_DIR/title_bg.PNG" -alpha off -unique-colors -depth 8 PNG8:"$RES_DIR/palette.png"

          # 3) Remappe TOUTES les images sur la palette extraite
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            [ -f "$img" ] || continue
            echo "[Remap] $(basename "$img") -> palette de title_bg (palette.png)"
            convert "$img" -remap "$RES_DIR/palette.png" PNG8:"$img"
          done

          # 4) Padding des overlays en multiples de 8 px (alignement tuiles)
          pad_to_multiple_of_8 () {
            local f="$1"
            local w h W H
            w=$(identify -format "%w" "$f")
            h=$(identify -format "%h" "$f")
            W=$(( ((w + 7) / 8) * 8 ))
            H=$(( ((h + 7) / 8) * 8 ))
            if [ "$W" -ne "$w" ] || [ "$H" -ne "$h" ]; then
              echo "[Pad] $(basename "$f") : ${w}x${h} -> ${W}x${H}"
              convert "$f" -background black -gravity northwest -extent "${W}x${H}" PNG8:"$f"
              # Remap encore une fois pour garantir la palette
              convert "$f" -remap "$RES_DIR/palette.png" PNG8:"$f"
            fi
          }
          for f in "$RES_DIR"/jimmy.PNG "$RES_DIR"/houcine.PNG "$RES_DIR"/logo.PNG; do
            [ -f "$f" ] && pad_to_multiple_of_8 "$f"
          done

          echo "=== Vérif finale (tailles & nb couleurs) ==="
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            [ -f "$img" ] || continue
            identify -format "%f : %wx%h, %k colors\n" "$img"
          done

          # 2) Extrait la palette de title_bg pour servir de CLUT commune
          if [ ! -f "$RES_DIR/title_bg.PNG" ]; then
            echo "::error::title_bg.PNG manquant dans $RES_DIR"
            exit 1
          fi
          echo "[Palette] Extraction palette depuis title_bg.PNG"
          convert "$RES_DIR/title_bg.PNG" -unique-colors -write mpr:pal +delete null:

          # 3) Remappe TOUTES les images sur la palette extraite (y compris le fond)
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            [ -f "$img" ] || continue
            echo "[Remap] $(basename "$img") -> palette de title_bg"
            convert "$img" -remap mpr:pal PNG8:"$img"
          done

          # 4) Padding des overlays en multiples de 8 px (alignement tuiles)
          pad_to_multiple_of_8 () {
            local f="$1"
            local w h W H
            w=$(identify -format "%w" "$f")
            h=$(identify -format "%h" "$f")
            W=$(( ((w + 7) / 8) * 8 ))
            H=$(( ((h + 7) / 8) * 8 ))
            if [ "$W" -ne "$w" ] || [ "$H" -ne "$h" ]; then
              echo "[Pad] $(basename "$f") : ${w}x${h} -> ${W}x${H}"
              convert "$f" -background black -gravity northwest -extent "${W}x${H}" PNG8:"$f"
              # Remap encore une fois (au cas où l'extent aurait ajouté du noir hors palette)
              convert "$f" -remap mpr:pal PNG8:"$f"
            fi
          }

          for f in "$RES_DIR"/jimmy.PNG "$RES_DIR"/houcine.PNG "$RES_DIR"/logo.PNG; do
            [ -f "$f" ] && pad_to_multiple_of_8 "$f"
          done

          echo "=== Vérif finale (tailles & nb couleurs) ==="
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            [ -f "$img" ] || continue
            identify -format "%f : %wx%h, %k colors\n" "$img"
          done

      # Décompresse Intro.vgz -> intro.vgm (optionnel)
      - name: Decompress VGZ -> VGM
        shell: bash
        run: |
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          SRC=$(ls "$RES_DIR" | grep -iE '^intro\.vgz$' || true)
          if [ -n "$SRC" ]; then
            echo "Intro.vgz trouvé -> conversion en intro.vgm"
            gzip -dc "$RES_DIR/$SRC" > "$RES_DIR/intro.vgm"
            ls -lh "$RES_DIR/intro.vgm"
          else
            echo "Avertissement: intro.vgz absent (OK si intro.vgm existe déjà)"
          fi

      # Droits d’écriture pour l’UID 1000 du conteneur SGDK
      - name: Make workspace writable for container
        run: sudo chown -R 1000:1000 "$GITHUB_WORKSPACE"

      # Vérif présence du fichier avant Docker
      - name: Verify resources.res before build
        shell: bash
        run: |
          ls -l "${{ steps.paths.outputs.res_dir }}/resources.res"
          echo "--- HEAD ---"
          head -n 20 "${{ steps.paths.outputs.res_dir }}/resources.res"

      # Build SGDK dans Docker (répertoire de travail = projet)
      - name: Build with SGDK (Docker)
        uses: addnab/docker-run-action@v3
        with:
          image: registry.gitlab.com/doragasu/docker-sgdk:v2.11
          options: >
            --entrypoint /bin/sh
            -e MAKEFLAGS=
            -e GNUMAKEFLAGS=
            -v ${{ github.workspace }}:/m68k
            -w /m68k/${{ steps.paths.outputs.project_dir }}
          run: |
            set -e
            echo "***"
            echo "Listing res/ depuis le conteneur:"
            ls -l res || true
            echo "***"
            mkdir -p src/boot out
            cp /sgdk/src/boot/sega.s src/boot/sega.s
            cp /sgdk/src/boot/rom_head.c src/boot/rom_head.c
            # Test direct rescomp avant make (debug)
            echo "Test direct rescomp:"
            /usr/bin/java -jar /sgdk/bin/rescomp.jar res/resources.res res/resources.rs -dep out/res/resources.o || true
            echo "*** Lance make ***"
            make -j1
            echo '=== out/ listing ==='
            ls -lh ./out || true

      # Rendre les fichiers au runner
      - name: Fix back permissions for runner
        run: sudo chown -R $USER:$USER "$GITHUB_WORKSPACE"

      # Prépare le nom de sortie
      - name: Prepare ROM filename
        id: name
        shell: bash
        run: |
          OUT_DIR="${{ steps.paths.outputs.out_dir }}"
          ROM=$(find "$OUT_DIR" -maxdepth 1 -type f -name '*.bin' | head -n1 || true)
          if [ -z "$ROM" ] ; then
            echo "ERREUR: Aucun .bin trouvé dans $OUT_DIR"
            ls -la "$OUT_DIR" || true
            exit 1
          fi
          echo "ROM detectee: $ROM"
          REPO="${GITHUB_REPOSITORY##*/}"
          VER="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            OUT="${REPO}-${VER}.bin"
          else
            OUT="${REPO}.bin"
          fi
          cp "$ROM" "$OUT"
          echo "outname=$OUT" >> "$GITHUB_OUTPUT"
          ls -la "$OUT"

      # Upload artifact (v4)
      - name: Upload ROM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rom
          path: ${{ steps.name.outputs.outname }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: rom
          path: .
      - name: Create GitHub Release and attach ROM
        uses: softprops/action-gh-release@v2
        with:
          files: ./*.bin
          generate_release_notes: true
