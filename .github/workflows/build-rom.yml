name: Build & Release SGDK ROM

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Localiser projet et dossier res/
      - name: Locate project/res folders
        id: paths
        shell: bash
        run: |
          if [ -d "Md-rer/res" ]; then
            PROJECT_DIR="Md-rer"
            RES_DIR="Md-rer/res"
          elif [ -d "res" ]; then
            PROJECT_DIR="."
            RES_DIR="res"
          else
            echo "ERREUR: dossier res/ introuvable (ni ./res ni ./Md-rer/res)." ; exit 1
          fi
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          echo "res_dir=$RES_DIR" >> $GITHUB_OUTPUT
          echo "Project dir = $PROJECT_DIR"
          echo "Res dir     = $RES_DIR"
          ls -la "$RES_DIR" || true

      # 2) Préparer les PNG (320x224, truecolor RGB, pas d’alpha)
      - name: Prepare PNGs for SGDK (resize + force truecolor)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick
          RES_DIR="${{ steps.paths.outputs.res_dir }}"
          shopt -s nullglob
          for img in "$RES_DIR"/*.PNG "$RES_DIR"/*.png; do
            echo "Processing $img"
            convert "$img" \
              -resize 320x224\! \
              -background black -alpha remove -alpha off \
              -depth 8 -type truecolor -define png:color-type=2 \
              "$img"
          done

      # 3) Donner les droits d'écriture au user du conteneur (UID 1000)
      - name: Make workspace writable for container
        run: sudo chown -R 1000:1000 "$GITHUB_WORKSPACE"

      # 4) Build SGDK dans le conteneur (entrypoint shell + fallback make)
      - name: Build with SGDK (Docker)
        shell: bash
        run: |
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          docker run --rm \
            --entrypoint /bin/sh \
            -e MAKEFLAGS= \
            -e GNUMAKEFLAGS= \
            -v "$GITHUB_WORKSPACE":/m68k \
            -w "/m68k/$PROJECT_DIR" \
            -t registry.gitlab.com/doragasu/docker-sgdk:v2.11 \
            -c "make -j1 || make"

      # 5) Vérif : lister le dossier out/
      - name: List out dir
        shell: bash
        run: |
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          echo "=== Contenu de $PROJECT_DIR/out ==="
          ls -la "$PROJECT_DIR/out" || true

      # 6) Rendre les fichiers au runner (sinon cp peut échouer)
      - name: Fix back permissions for runner
        run: sudo chown -R $USER:$USER "$GITHUB_WORKSPACE"

      # 7) Préparer le nom du fichier ROM (prend le 1er .bin trouvé)
      - name: Prepare ROM filename
        id: name
        shell: bash
        run: |
          set -e
          PROJECT_DIR="${{ steps.paths.outputs.project_dir }}"
          ROM=$(find "$PROJECT_DIR/out" -maxdepth 1 -type f -name "*.bin" | head -n1 || true)
          if [ -z "$ROM" ]; then
            echo "ERREUR: Aucun .bin trouvé dans $PROJECT_DIR/out"
            ls -la "$PROJECT_DIR/out" || true
            exit 1
          fi
          echo "ROM détectée: $ROM"
          REPO="${GITHUB_REPOSITORY##*/}"
          VER="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            OUT="${REPO}-${VER}.bin"
          else
            OUT="${REPO}.bin"
          fi
          cp "$ROM" "$OUT"
          echo "outname=$OUT" >> "$GITHUB_OUTPUT"
          ls -la "$OUT"

      # 8) Upload de la ROM en artifact
      - name: Upload ROM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rom
          path: ${{ steps.name.outputs.outname }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: rom
          path: .
      - name: Create GitHub Release and attach ROM
        uses: softprops/action-gh-release@v2
        with:
          files: ./*.bin
          generate_release_notes: true
